#pragma once

#include <string>
#include <unordered_map>

/**
 * @brief List of all chemical elements that might be available.
 */
enum Element : int {
    H = 1,
    He,
    Li,
    Be,
    B,
    C,
    N,
    O,
    F,
    Ne,
    Na,
    Mg,
    Al,
    Si,
    P,
    S,
    Cl,
    Ar,
    K,
    Ca,
    Sc,
    Ti,
    V,
    Cr,
    Mn,
    Fe,
    Co,
    Ni,
    Cu,
    Zn,
    Ga,
    Ge,
    As,
    Se,
    Br,
    Kr,
    Rb,
    Sr,
    Y,
    Zr,
    Nb,
    Mo,
    Tc,
    Ru,
    Rh,
    Pd,
    Ag,
    Cd,
    In,
    Sn,
    Sb,
    Te,
    I,
    Xe,
    Cs,
    Ba,
    La,
    Ce,
    Pr,
    Nd,
    Pm,
    Sm,
    Eu,
    Gd,
    Tb,
    Dy,
    Ho,
    Er,
    Tm,
    Yb,
    Lu,
    Hf,
    Ta,
    W,
    Re,
    Os,
    Ir,
    Pt,
    Au,
    Hg,
    Tl,
    Pb,
    Bi,
    Po,
    At,
    Rn,
    Fr,
    Ra,
    Ac,
    Th,
    Pa,
    U,
    Np,
    Pu,
    Am,
    Cm,
    Bk,
    Cf,
    Es,
    Fm,
    Md,
    No,
    Lr,
    Rf,
    Db,
    Sg,
    Bh,
    Hs,
    Mt,
    Ds,
    Rg,
    Cn,
    Nh,
    Fl,
    Mc,
    Lv,
    Ts,
    Og,
    Unknown
};

/**
 * @brief Structure holding full and abbreviated name of an element (e.g Helium
 * and He).
 */
struct ElementNames {
    std::string short_name;
    std::string long_name;
};

static const std::unordered_map<Element, ElementNames> element_names_map = {
    {Element::H, {"H", "Hydrogen"}},
    {Element::He, {"He", "Helium"}},
    {Element::Li, {"Li", "Lithium"}},
    {Element::Be, {"Be", "Beryllium"}},
    {Element::B, {"B", "Boron"}},
    {Element::C, {"C", "Carbon"}},
    {Element::N, {"N", "Nitrogen"}},
    {Element::O, {"O", "Oxygen"}},
    {Element::F, {"F", "Fluorine"}},
    {Element::Ne, {"Ne", "Neon"}},
    {Element::Na, {"Na", "Sodium"}},
    {Element::Mg, {"Mg", "Magnesium"}},
    {Element::Al, {"Al", "Aluminum"}},
    {Element::Si, {"Si", "Silicon"}},
    {Element::P, {"P", "Phosphorus"}},
    {Element::S, {"S", "Sulfur"}},
    {Element::Cl, {"Cl", "Chlorine"}},
    {Element::Ar, {"Ar", "Argon"}},
    {Element::K, {"K", "Potassium"}},
    {Element::Ca, {"Ca", "Calcium"}},
    {Element::Sc, {"Sc", "Scandium"}},
    {Element::Ti, {"Ti", "Titanium"}},
    {Element::V, {"V", "Vanadium"}},
    {Element::Cr, {"Cr", "Chromium"}},
    {Element::Mn, {"Mn", "Manganese"}},
    {Element::Fe, {"Fe", "Iron"}},
    {Element::Co, {"Co", "Cobalt"}},
    {Element::Ni, {"Ni", "Nickel"}},
    {Element::Cu, {"Cu", "Copper"}},
    {Element::Zn, {"Zn", "Zinc"}},
    {Element::Ga, {"Ga", "Gallium"}},
    {Element::Ge, {"Ge", "Germanium"}},
    {Element::As, {"As", "Arsenic"}},
    {Element::Se, {"Se", "Selenium"}},
    {Element::Br, {"Br", "Bromine"}},
    {Element::Kr, {"Kr", "Krypton"}},
    {Element::Rb, {"Rb", "Rubidium"}},
    {Element::Sr, {"Sr", "Strontium"}},
    {Element::Y, {"Y", "Yttrium"}},
    {Element::Zr, {"Zr", "Zirconium"}},
    {Element::Nb, {"Nb", "Niobium"}},
    {Element::Mo, {"Mo", "Molybdenum"}},
    {Element::Tc, {"Tc", "Technetium"}},
    {Element::Ru, {"Ru", "Ruthenium"}},
    {Element::Rh, {"Rh", "Rhodium"}},
    {Element::Pd, {"Pd", "Palladium"}},
    {Element::Ag, {"Ag", "Silver"}},
    {Element::Cd, {"Cd", "Cadmium"}},
    {Element::In, {"In", "Indium"}},
    {Element::Sn, {"Sn", "Tin"}},
    {Element::Sb, {"Sb", "Antimony"}},
    {Element::Te, {"Te", "Tellurium"}},
    {Element::I, {"I", "Iodine"}},
    {Element::Xe, {"Xe", "Xenon"}},
    {Element::Cs, {"Cs", "Cesium"}},
    {Element::Ba, {"Ba", "Barium"}},
    {Element::La, {"La", "Lanthanum"}},
    {Element::Ce, {"Ce", "Cerium"}},
    {Element::Pr, {"Pr", "Praseodymium"}},
    {Element::Nd, {"Nd", "Neodymium"}},
    {Element::Pm, {"Pm", "Promethium"}},
    {Element::Sm, {"Sm", "Samarium"}},
    {Element::Eu, {"Eu", "Europium"}},
    {Element::Gd, {"Gd", "Gadolinium"}},
    {Element::Tb, {"Tb", "Terbium"}},
    {Element::Dy, {"Dy", "Dysprosium"}},
    {Element::Ho, {"Ho", "Holmium"}},
    {Element::Er, {"Er", "Erbium"}},
    {Element::Tm, {"Tm", "Thulium"}},
    {Element::Yb, {"Yb", "Ytterbium"}},
    {Element::Lu, {"Lu", "Lutetium"}},
    {Element::Hf, {"Hf", "Hafnium"}},
    {Element::Ta, {"Ta", "Tantalum"}},
    {Element::W, {"W", "Tungsten"}},
    {Element::Re, {"Re", "Rhenium"}},
    {Element::Os, {"Os", "Osmium"}},
    {Element::Ir, {"Ir", "Iridium"}},
    {Element::Pt, {"Pt", "Platinum"}},
    {Element::Au, {"Au", "Gold"}},
    {Element::Hg, {"Hg", "Mercury"}},
    {Element::Tl, {"Tl", "Thallium"}},
    {Element::Pb, {"Pb", "Lead"}},
    {Element::Bi, {"Bi", "Bismuth"}},
    {Element::Po, {"Po", "Polonium"}},
    {Element::At, {"At", "Astatine"}},
    {Element::Rn, {"Rn", "Radon"}},
    {Element::Fr, {"Fr", "Francium"}},
    {Element::Ra, {"Ra", "Radium"}},
    {Element::Ac, {"Ac", "Actinium"}},
    {Element::Th, {"Th", "Thorium"}},
    {Element::Pa, {"Pa", "Protactinium"}},
    {Element::U, {"U", "Uranium"}},
    {Element::Np, {"Np", "Neptunium"}},
    {Element::Pu, {"Pu", "Plutonium"}},
    {Element::Am, {"Am", "Americium"}},
    {Element::Cm, {"Cm", "Curium"}},
    {Element::Bk, {"Bk", "Berkelium"}},
    {Element::Cf, {"Cf", "Californium"}},
    {Element::Es, {"Es", "Einsteinium"}},
    {Element::Fm, {"Fm", "Fermium"}},
    {Element::Md, {"Md", "Mendelevium"}},
    {Element::No, {"No", "Nobelium"}},
    {Element::Lr, {"Lr", "Lawrencium"}},
    {Element::Rf, {"Rf", "Rutherfordium"}},
    {Element::Db, {"Db", "Dubnium"}},
    {Element::Sg, {"Sg", "Seaborgium"}},
    {Element::Bh, {"Bh", "Bohrium"}},
    {Element::Hs, {"Hs", "Hassium"}},
    {Element::Mt, {"Mt", "Meitnerium"}},
    {Element::Ds, {"Ds", "Darmstadtium"}},
    {Element::Rg, {"Rg", "Roentgenium"}},
    {Element::Cn, {"Cn", "Copernicium"}},
    {Element::Nh, {"Nh", "Nihonium"}},
    {Element::Fl, {"Fl", "Flerovium"}},
    {Element::Mc, {"Mc", "Moscovium"}},
    {Element::Lv, {"Lv", "Livermorium"}},
    {Element::Ts, {"Ts", "Tennessine"}},
    {Element::Og, {"Og", "Oganesson"}},
    {Element::Unknown, {"Unknown", "Unknown"}}};

inline std::string get_element_short_name(Element element) {
    auto it = element_names_map.find(element);
    return it != element_names_map.end() ? it->second.short_name : "Unknown";
}

inline std::string get_element_long_name(Element element) {
    auto it = element_names_map.find(element);
    return it != element_names_map.end() ? it->second.long_name : "Unknown";
}

inline Element string_to_element(const std::string &name) {
    for (const auto &pair : element_names_map) {
        if (pair.second.short_name == name || pair.second.long_name == name) {
            return pair.first;
        }
    }
    return Element::Unknown;
}